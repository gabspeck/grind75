package arrays

// Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.
//
// You must write an algorithm with O(log n) runtime complexity.
//
// Example 1:
//
// Input: nums = [-1,0,3,5,9,12], target = 9
// Output: 4
// Explanation: 9 exists in nums and its index is 4
//
// Example 2:
//
// Input: nums = [-1,0,3,5,9,12], target = 2
// Output: -1
// Explanation: 2 does not exist in nums so return -1
//
// Constraints:
//
//	1 <= nums.length <= 104
//	-104 < nums[i], target < 104
//	All the integers in nums are unique.
//	nums is sorted in ascending order.
type BinarySearchFunc func(nums []int, target int) int

// LinearSearch is a naive array search with O(n) complexity
func LinearSearch(nums []int, target int) int {
	for i := 0; i < len(nums); i++ {
		if nums[i] == target {
			return i
		}
	}
	return -1
}

// BinarySearchAttemptRecursive uses a recursive approach to binary search
func BinarySearchAttemptRecursive(nums []int, target int) int {
	if len(nums) < 1 {
		return -1
	}

	if len(nums) == 1 {
		if nums[0] == target {
			return 0
		}
		return -1
	}

	middleIdx := len(nums) / 2

	if target == nums[middleIdx] {
		return middleIdx
	}

	result := -1

	if target < nums[middleIdx] {
		result = BinarySearchAttemptRecursive(nums[0:middleIdx], target)
	} else {
		result = BinarySearchAttemptRecursive(nums[middleIdx+1:], target)
		if result != -1 {
			result += middleIdx + 1
		}
	}

	return result

}

// BinarySearchReference is a reference binary search implementation generated by Claude
// Visualizer: https://www.cs.usfca.edu/~galles/visualization/Search.html
func BinarySearchReference(nums []int, target int) int {
	left := 0
	right := len(nums) - 1

	for left <= right {
		// Calculate middle index (this way avoids potential integer overflow)
		mid := left + (right-left)/2

		// Check if target is at the middle
		if nums[mid] == target {
			return mid
		}

		// If target is less than the middle element, search the left half
		if target < nums[mid] {
			right = mid - 1
		} else {
			// Otherwise, search the right half
			left = mid + 1
		}
	}

	// Target not found
	return -1
}
