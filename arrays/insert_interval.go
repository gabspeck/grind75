package arrays

// You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.
//
// Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).
//
// Return intervals after the insertion.
//
// Note that you don't need to modify intervals in-place. You can make a new array and return it.
type InsertIntervalFunc func(intervals [][]int, newInterval []int) [][]int

// InsertIntervalReference is a reference implementation generated by ChatGPT o3
func InsertIntervalReference(intervals [][]int, newInterval []int) [][]int {
	// sorted by start
	// non-contiguous
	// non-overlapping
	results := make([][]int, 0)

	i := 0
	for ; i < len(intervals) && intervals[i][1] < newInterval[0]; i++ {
		results = append(results, intervals[i])
	}

	for ; i < len(intervals) && intervals[i][0] <= newInterval[1]; i++ {
		newInterval[0] = min(newInterval[0], intervals[i][0])
		newInterval[1] = max(newInterval[1], intervals[i][1])
	}

	results = append(results, newInterval)

	return append(results, intervals[i:]...)

}
